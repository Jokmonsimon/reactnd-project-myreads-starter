{"ast":null,"code":"import _slicedToArray from \"/home/jokmon/reactnd/reactnd-project-myreads-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/jokmon/reactnd/reactnd-project-myreads-starter/src/App.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport Header from './myreads_components/Header';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\nimport BookShelves from './myreads_components/BookShelves';\nimport BookSearchPage from './myreads_components/BookSearchPage';\nimport { Route } from 'react-router-dom';\n\nvar BooksApp = function BooksApp() {\n  useEffect(function () {\n    BooksAPI.getAll().then(function (data) {\n      return setBooks(data);\n    });\n  }, []);\n  /**\n   * TODO: Instead of using this state variable to keep track of which page\n   * we're on, use the URL in the browser's address bar. This will ensure that\n   * users can use the browser's back and forward buttons to navigate between\n   * pages, as well as provide a good URL they can bookmark and share.\n   */\n  // const [showSearchPage, setShowSearchPage] = useState(false);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      books = _useState2[0],\n      setBooks = _useState2[1];\n\n  var updateBookShelf = function updateBookShelf(book, newBookShelf) {\n    var updatedBooks = books.map(function (b) {\n      if (b.id === book.id) {\n        book.shelf = newBookShelf;\n        return book;\n      }\n\n      return b;\n    });\n    setBooks(updatedBooks);\n    BooksAPI.update(book, newBookShelf).then(function (data) {\n      return console.log(data);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: function render() {\n      return React.createElement(\"div\", {\n        className: \"list-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"list-books-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(BookShelves, {\n        books: books,\n        updateBookShelf: updateBookShelf,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"open-search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/search\",\n    render: function render(_ref) {\n      var history = _ref.history;\n      return React.createElement(BookSearchPage, {\n        onCreateContact: function onCreateContact(contact) {\n          _this.createContact(contact);\n\n          history.push('/');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n};\n\nexport default BooksApp;","map":{"version":3,"sources":["/home/jokmon/reactnd/reactnd-project-myreads-starter/src/App.js"],"names":["React","useState","useEffect","Header","BooksAPI","BookShelves","BookSearchPage","Route","BooksApp","getAll","then","data","setBooks","books","updateBookShelf","book","newBookShelf","updatedBooks","map","b","id","shelf","update","console","log","history","contact","createContact","push"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,OAAOC,cAAP,MAA2B,qCAA3B;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAErBN,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,QAAQ,CAACK,MAAT,GACGC,IADH,CACQ,UAAAC,IAAI;AAAA,aAAIC,QAAQ,CAACD,IAAD,CAAZ;AAAA,KADZ;AAED,GAHQ,EAGN,EAHM,CAAT;AAKE;;;;;;AAMD;;AAboB,kBAeOV,QAAQ,CAAC,EAAD,CAff;AAAA;AAAA,MAeZY,KAfY;AAAA,MAeLD,QAfK;;AAiBnB,MAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,YAAP,EAAwB;AAC9C,QAAMC,YAAY,GAAGJ,KAAK,CAACK,GAAN,CAAU,UAAAC,CAAC,EAAI;AAClC,UAAIA,CAAC,CAACC,EAAF,KAASL,IAAI,CAACK,EAAlB,EAAsB;AACpBL,QAAAA,IAAI,CAACM,KAAL,GAAaL,YAAb;AACA,eAAOD,IAAP;AACD;;AACD,aAAOI,CAAP;AACD,KANoB,CAArB;AAOAP,IAAAA,QAAQ,CAACK,YAAD,CAAR;AACAb,IAAAA,QAAQ,CAACkB,MAAT,CAAgBP,IAAhB,EAAsBC,YAAtB,EAAoCN,IAApC,CAAyC,UAAAC,IAAI;AAAA,aAAIY,OAAO,CAACC,GAAR,CAAYb,IAAZ,CAAJ;AAAA,KAA7C;AACD,GAVD;;AAYA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,MAAM,EAAE;AAAA,aAC5B;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AAAa,QAAA,KAAK,EAAEE,KAApB;AAA2B,QAAA,eAAe,EAAEC,eAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFJ,EAKS;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALT,CAD4B;AAAA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAeM,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,SAAlB;AAA4B,IAAA,MAAM,EAAE;AAAA,UAAGW,OAAH,QAAGA,OAAH;AAAA,aACpC,oBAAC,cAAD;AACA,QAAA,eAAe,EAAE,yBAACC,OAAD,EAAa;AAC5B,UAAA,KAAI,CAACC,aAAL,CAAmBD,OAAnB;;AACAD,UAAAA,OAAO,CAACG,IAAR,CAAa,GAAb;AACD,SAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADoC;AAAA,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfN,CADF;AA2BH,CAxDD;;AA0DA,eAAepB,QAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Header from './myreads_components/Header'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport BookShelves from './myreads_components/BookShelves'\nimport BookSearchPage from './myreads_components/BookSearchPage'\nimport { Route } from 'react-router-dom'\n\nconst BooksApp = () => {\n\n  useEffect(() => {\n    BooksAPI.getAll()\n      .then(data => setBooks(data))\n  }, [])\n  \n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n   // const [showSearchPage, setShowSearchPage] = useState(false);\n\n    const [books, setBooks] = useState([])\n  \n    const updateBookShelf = (book, newBookShelf) => {\n      const updatedBooks = books.map(b => {\n        if (b.id === book.id) {\n          book.shelf = newBookShelf;\n          return book;\n        }\n        return b;\n      })\n      setBooks(updatedBooks)\n      BooksAPI.update(book, newBookShelf).then(data => console.log(data))\n    }\n\n    return (\n      <div className=\"app\">\n        <Route exact path='/' render={() => (\n          <div className=\"list-books\">\n            <Header />\n              <div className=\"list-books-content\">\n                <BookShelves books={books} updateBookShelf={updateBookShelf}/>\n                  </div>\n                   <div className=\"open-search\">\n                   \n                   \n       \n                   </div>\n                 </div>\n        )} />\n                 \n            <Route exact path='/search' render={({ history }) => (\n            <BookSearchPage\n            onCreateContact={(contact) => {\n              this.createContact(contact)\n              history.push('/')\n            }}\n            />\n        )}\n        />\n      </div>\n    )\n}\n\nexport default BooksApp\n"]},"metadata":{},"sourceType":"module"}