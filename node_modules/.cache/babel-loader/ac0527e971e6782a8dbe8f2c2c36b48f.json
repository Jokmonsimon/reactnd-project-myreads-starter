{"ast":null,"code":"import _regeneratorRuntime from \"/home/jokmon/reactnd/reactnd-project-myreads-starter/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jokmon/reactnd/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/jokmon/reactnd/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/jokmon/reactnd/reactnd-project-myreads-starter/src/pages/BookSearchPage.js\";\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport * as BooksAPI from '../BooksAPI';\n\nvar BookSearchPage = function BookSearchPage() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 3),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1],\n      setBooks = _useState2[2];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      bookSearchResults = _useState4[0],\n      setBookSearchResults = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 1),\n      showSearchPage = _useState6[0];\n\n  useEffect(function () {\n    var bookSearch =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(\"https://reactnd-books-api.udacity.com\", {\n                  params: {\n                    action: \"query\",\n                    list: \"bookSearch\",\n                    origin: \"*\",\n                    format: \"json\",\n                    srsearch: searchTerm\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function bookSearch() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    bookSearch();\n    console.log(bookSearch);\n  }, [searchTerm]);\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      books = _useState8[0],\n      bookSearchPage = _useState8[1];\n\n  var updateBookShelf = function updateBookShelf(book, newBookShelf) {\n    var updatedBooks = books.map(function (b) {\n      if (b.id === book.id) {\n        book.shelf = newBookShelf;\n        return book;\n      }\n\n      return b;\n    });\n    setBooks(updatedBooks);\n    BooksAPI.update(book, newBookShelf).then(function (data) {\n      return data;\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"app\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"serach-books\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"search-books-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"close-search\",\n    onClick: function onClick() {\n      return showSearchPage(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Close\"), React.createElement(\"div\", {\n    className: \"search-books-input-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Search by title or author\",\n    value: searchTerm,\n    onChange: function onChange(e) {\n      return setSearchTerm(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })))));\n};\n\nexport default BookSearchPage;","map":{"version":3,"sources":["/home/jokmon/reactnd/reactnd-project-myreads-starter/src/pages/BookSearchPage.js"],"names":["axios","React","useState","useEffect","BooksAPI","BookSearchPage","searchTerm","setSearchTerm","setBooks","bookSearchResults","setBookSearchResults","showSearchPage","bookSearch","get","params","action","list","origin","format","srsearch","console","log","books","bookSearchPage","updateBookShelf","book","newBookShelf","updatedBooks","map","b","id","shelf","update","then","data","e","target","value"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport * as BooksAPI from '../BooksAPI'\n\n\nconst BookSearchPage = () => {   \n  const [searchTerm, setSearchTerm, setBooks] = useState(\"\");\n  const [bookSearchResults, setBookSearchResults] = useState([]);\n  const [showSearchPage] = useState(false);\n\n  useEffect(() => {\n    const bookSearch = async () => {\n      await axios.get(\"https://reactnd-books-api.udacity.com\", {\n        params: {\n          action: \"query\",\n          list: \"bookSearch\",\n          origin: \"*\",\n          format: \"json\",\n          srsearch: searchTerm,\n        },\n      });\n    }\n    bookSearch();\n    console.log(bookSearch)\n  }, [searchTerm]);\n\n  const [books, bookSearchPage] = useState([])\n  \n    const updateBookShelf = (book, newBookShelf) => {\n      const updatedBooks = books.map(b => {\n        if (b.id === book.id) {\n          book.shelf = newBookShelf;\n          return book;\n        }\n        return b;\n      });\n      setBooks(updatedBooks)\n      BooksAPI.update(book, newBookShelf).then(data => (data))\n    }\n \n    \n  return (\n    <div className=\"app\">\n      <div className=\"serach-books\">\n        <div className=\"search-books-bar\">\n        <button className=\"close-search\" onClick={() => showSearchPage(false)}>Close</button>\n          <div className=\"search-books-input-wrapper\">\n            <input type=\"text\" placeholder=\"Search by title or author\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default BookSearchPage;"]},"metadata":{},"sourceType":"module"}