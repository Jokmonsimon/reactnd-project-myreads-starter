{"ast":null,"code":"import _slicedToArray from \"/home/jokmon/reactnd/reactnd-project-myreads-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/jokmon/reactnd/reactnd-project-myreads-starter/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Header from './myreads_components/Header';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\nimport BookShelves from './myreads_components/BookShelves';\nimport { Link } from 'react-router-dom';\nimport BookSearchPage from './myreads_components/BookSearchPage';\n\nvar BooksApp = function BooksApp() {\n  useEffect(function () {\n    BooksAPI.getAll().then(function (data) {\n      return setBooks(data);\n    });\n  }, []);\n  /**\n   * TODO: Instead of using this state variable to keep track of which page\n   * we're on, use the URL in the browser's address bar. This will ensure that\n   * users can use the browser's back and forward buttons to navigate between\n   * pages, as well as provide a good URL they can bookmark and share.\n   */\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showSearchPage = _useState2[0],\n      setShowSearchPage = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      books = _useState4[0],\n      setBooks = _useState4[1];\n\n  var updateBookShelf = function updateBookShelf(book, newBookShelf) {\n    var updatedBooks = books.map(function (b) {\n      if (b.id === book.id) {\n        book.shelf = newBookShelf;\n        return book;\n      }\n\n      return b;\n    });\n    setBooks(updatedBooks);\n    BooksAPI.update(book, newBookShelf).then(function (data) {\n      return console.log(data);\n    });\n  };\n\n  return React.createElement(BookSearchPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  });\n};\n\nexport default BooksApp;","map":{"version":3,"sources":["/home/jokmon/reactnd/reactnd-project-myreads-starter/src/App.js"],"names":["React","useState","useEffect","Header","BooksAPI","BookShelves","Link","BookSearchPage","BooksApp","getAll","then","data","setBooks","showSearchPage","setShowSearchPage","books","updateBookShelf","book","newBookShelf","updatedBooks","map","b","id","shelf","update","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,kCAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,cAAP,MAA2B,qCAA3B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAErBN,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,QAAQ,CAACK,MAAT,GACGC,IADH,CACQ,UAAAC,IAAI;AAAA,aAAIC,QAAQ,CAACD,IAAD,CAAZ;AAAA,KADZ;AAED,GAHQ,EAGN,EAHM,CAAT;AAKE;;;;;;;AAPmB,kBAayBV,QAAQ,CAAC,KAAD,CAbjC;AAAA;AAAA,MAaZY,cAbY;AAAA,MAaIC,iBAbJ;;AAAA,mBAeOb,QAAQ,CAAC,EAAD,CAff;AAAA;AAAA,MAeZc,KAfY;AAAA,MAeLH,QAfK;;AAiBnB,MAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,YAAP,EAAwB;AAC9C,QAAMC,YAAY,GAAGJ,KAAK,CAACK,GAAN,CAAU,UAAAC,CAAC,EAAI;AAClC,UAAIA,CAAC,CAACC,EAAF,KAASL,IAAI,CAACK,EAAlB,EAAsB;AACpBL,QAAAA,IAAI,CAACM,KAAL,GAAaL,YAAb;AACA,eAAOD,IAAP;AACD;;AACD,aAAOI,CAAP;AACD,KANoB,CAArB;AAOAT,IAAAA,QAAQ,CAACO,YAAD,CAAR;AACAf,IAAAA,QAAQ,CAACoB,MAAT,CAAgBP,IAAhB,EAAsBC,YAAtB,EAAoCR,IAApC,CAAyC,UAAAC,IAAI;AAAA,aAAIc,OAAO,CAACC,GAAR,CAAYf,IAAZ,CAAJ;AAAA,KAA7C;AACD,GAVD;;AAYA,SACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGH,CAhCD;;AAkCA,eAAeH,QAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Header from './myreads_components/Header'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport BookShelves from './myreads_components/BookShelves'\nimport { Link } from 'react-router-dom'\nimport BookSearchPage from './myreads_components/BookSearchPage'\n\nconst BooksApp = () => {\n\n  useEffect(() => {\n    BooksAPI.getAll()\n      .then(data => setBooks(data))\n  }, [])\n  \n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    const [showSearchPage, setShowSearchPage] = useState(false);\n\n    const [books, setBooks] = useState([])\n  \n    const updateBookShelf = (book, newBookShelf) => {\n      const updatedBooks = books.map(b => {\n        if (b.id === book.id) {\n          book.shelf = newBookShelf;\n          return book;\n        }\n        return b;\n      })\n      setBooks(updatedBooks)\n      BooksAPI.update(book, newBookShelf).then(data => console.log(data))\n    }\n\n    return (\n      <BookSearchPage />\n    )\n}\n\nexport default BooksApp\n"]},"metadata":{},"sourceType":"module"}